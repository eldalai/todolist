<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>todolist-web</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:application-context-web.xml</param-value>
	</context-param>

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>


	<!-- OJO: Habría que ver si existe algun escenario en el cual convenga tener este filtro de Hibernate
		 Porque la seralizacion se objetos la maneja el converter de Json que se puede customizar, permitiendo
		 controlar qué partes del grafo de objetos se serializa. Con el filtro de Hibernate se puede terminar
		 pasando un montón más de información que la que se necesita y podría haber problemas de performance  -->
<!-- 	<filter> -->
<!-- 		<filter-name>hibernateFilter</filter-name> -->
<!-- 		<filter-class> -->
<!-- 			org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter -->
<!-- 		</filter-class> -->
<!-- 		<init-param> -->
<!-- 			<param-name>entityManagerFactoryBeanName</param-name> -->
<!-- 			<param-value>entityManagerFactory</param-value> -->
<!-- 		</init-param> -->
<!-- 	</filter> -->

	<filter>
		<filter-name>httpPutFormFilter</filter-name>
		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
	</filter>

<!-- 	<filter-mapping> -->
<!-- 		<filter-name>hibernateFilter</filter-name> -->
<!-- 		<url-pattern>/messagebroker/*</url-pattern> -->
<!-- 	</filter-mapping> -->


	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



	<filter-mapping>
		<filter-name>httpPutFormFilter</filter-name>
		<servlet-name>RestDispacherServlet</servlet-name>
	</filter-mapping>

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<servlet>
		<servlet-name>RestDispacherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>RestDispacherServlet</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

</web-app>
